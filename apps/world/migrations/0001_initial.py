# Generated by Django 5.0.1 on 2025-09-25 18:03

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('battles', '0001_initial'),
        ('characters', '0001_initial'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('theme', models.CharField(default='grassland', max_length=50)),
                ('background_music', models.CharField(blank=True, max_length=100)),
                ('recommended_level', models.IntegerField(default=1)),
                ('is_unlocked', models.BooleanField(default=True)),
                ('unlock_requirements', models.JSONField(default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='World',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnemySpawn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spawn_rate', models.FloatField(default=1.0)),
                ('max_count', models.IntegerField(default=1)),
                ('respawn_time', models.IntegerField(default=300)),
                ('min_player_level', models.IntegerField(default=1)),
                ('max_player_level', models.IntegerField(default=100)),
                ('story_flag_required', models.CharField(blank=True, max_length=100)),
                ('enemy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.enemy')),
            ],
            options={
                'db_table': 'enemy_spawns',
            },
        ),
        migrations.CreateModel(
            name='ItemSpawn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('is_hidden', models.BooleanField(default=False)),
                ('respawns', models.BooleanField(default=False)),
                ('respawn_time', models.IntegerField(default=3600)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.gameitem')),
                ('requires_skill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='battles.skill')),
            ],
            options={
                'db_table': 'item_spawns',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('location_type', models.CharField(choices=[('town', 'Town'), ('dungeon', 'Dungeon'), ('field', 'Field'), ('boss_room', 'Boss Room'), ('shop', 'Shop'), ('inn', 'Inn'), ('school', 'School/Tutorial')], max_length=20)),
                ('x_coordinate', models.IntegerField(default=0)),
                ('y_coordinate', models.IntegerField(default=0)),
                ('map_icon', models.CharField(blank=True, max_length=100)),
                ('background_image', models.CharField(blank=True, max_length=200)),
                ('background_music', models.CharField(blank=True, max_length=200)),
                ('has_events', models.BooleanField(default=False)),
                ('connected_locations', models.ManyToManyField(blank=True, related_name='connections', to='world.location')),
                ('enemy_spawns', models.ManyToManyField(blank=True, through='world.EnemySpawn', to='characters.enemy')),
                ('item_spawns', models.ManyToManyField(blank=True, through='world.ItemSpawn', to='core.gameitem')),
            ],
            options={
                'db_table': 'locations',
            },
        ),
        migrations.AddField(
            model_name='itemspawn',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world.location'),
        ),
        migrations.AddField(
            model_name='enemyspawn',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world.location'),
        ),
        migrations.CreateModel(
            name='NPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('sprite_name', models.CharField(max_length=100)),
                ('portrait_name', models.CharField(blank=True, max_length=100)),
                ('default_dialogue', models.TextField()),
                ('dialogue_tree', models.JSONField(default=dict)),
                ('is_merchant', models.BooleanField(default=False)),
                ('is_quest_giver', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('teaches_concepts', models.ManyToManyField(blank=True, related_name='taught_by_npcs', to='core.pythonconcept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NPCSpawn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x_position', models.IntegerField(default=0)),
                ('y_position', models.IntegerField(default=0)),
                ('is_moving', models.BooleanField(default=False)),
                ('movement_pattern', models.CharField(default='static', max_length=50)),
                ('story_flag_required', models.CharField(blank=True, max_length=100)),
                ('time_of_day', models.CharField(blank=True, max_length=20)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world.location')),
                ('npc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world.npc')),
            ],
            options={
                'db_table': 'npc_spawns',
                'unique_together': {('location', 'npc')},
            },
        ),
        migrations.AddField(
            model_name='location',
            name='npc_spawns',
            field=models.ManyToManyField(blank=True, through='world.NPCSpawn', to='world.npc'),
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('quest_type', models.CharField(choices=[('main', 'Main Story'), ('side', 'Side Quest'), ('tutorial', 'Tutorial'), ('daily', 'Daily Quest')], max_length=20)),
                ('required_level', models.IntegerField(default=1)),
                ('objectives', models.JSONField(default=list)),
                ('experience_reward', models.IntegerField(default=100)),
                ('gold_reward', models.IntegerField(default=50)),
                ('giver_npc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quests_given', to='world.npc')),
                ('item_rewards', models.ManyToManyField(blank=True, to='core.gameitem')),
                ('prerequisite_quests', models.ManyToManyField(blank=True, to='world.quest')),
                ('unlocks_concepts', models.ManyToManyField(blank=True, related_name='unlocked_by_quests', to='core.pythonconcept')),
            ],
            options={
                'db_table': 'quests',
            },
        ),
        migrations.AddField(
            model_name='location',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='world.region'),
        ),
        migrations.AddField(
            model_name='region',
            name='world',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='world.world'),
        ),
        migrations.AlterUniqueTogether(
            name='enemyspawn',
            unique_together={('location', 'enemy')},
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('region', 'name')},
        ),
    ]
